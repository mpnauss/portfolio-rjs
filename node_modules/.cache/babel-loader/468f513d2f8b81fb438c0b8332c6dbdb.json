{"ast":null,"code":"var _jsxFileName = \"/Users/margaret.farron/Documents/portfolio-react/portfolio-avanade/src/components/SlideShow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Slide from './Slide.js'; //If slide index == focused, add .slide-focused to slide class list. \n//If slide index == focused-1 add .slide-prev to slide class list\n//if slide index == focused+1 add .slide-next to slide class list\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SlideShow = props => {\n  _s();\n\n  const [focused, setFocused] = useState(0); // const idNames = ['prev', 'focused', 'next']\n\n  function determineFocus(slideIndex) {\n    let idSelection;\n\n    if (slideIndex == focused) {\n      idSelection = 'focused';\n    } else if (slideIndex == focused - 1) {\n      idSelection = 'prev';\n    } else if (slideIndex == focused + 1) {\n      idSelection = 'next';\n    } else {\n      idSelection = '';\n    }\n\n    return idSelection;\n  }\n\n  console.log(focused);\n  const content = props.data;\n  const contentMap = content.map((slide, index) => {\n    return /*#__PURE__*/_jsxDEV(Slide, {\n      data: slide,\n      index: index,\n      idName: determineFocus(index)\n    }, slide.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-width-mod\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slide-container\",\n      children: contentMap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SlideShow, \"BRqfCtzFEUZ/t3qVOOXxC3dfYPc=\");\n\n_c = SlideShow;\nexport default SlideShow;\n\nvar _c;\n\n$RefreshReg$(_c, \"SlideShow\");","map":{"version":3,"sources":["/Users/margaret.farron/Documents/portfolio-react/portfolio-avanade/src/components/SlideShow.js"],"names":["React","useState","Slide","SlideShow","props","focused","setFocused","determineFocus","slideIndex","idSelection","console","log","content","data","contentMap","map","slide","index","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,YAAlB,C,CAEA;AACA;AACA;;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,CAAD,CAAtC,CAD2B,CAG3B;;AAEA,WAASM,cAAT,CAAwBC,UAAxB,EAAoC;AAClC,QAAIC,WAAJ;;AACA,QAAID,UAAU,IAAIH,OAAlB,EAA2B;AACzBI,MAAAA,WAAW,GAAG,SAAd;AACD,KAFD,MAEO,IAAID,UAAU,IAAIH,OAAO,GAAC,CAA1B,EAA6B;AAClCI,MAAAA,WAAW,GAAG,MAAd;AACD,KAFM,MAEA,IAAID,UAAU,IAAIH,OAAO,GAAC,CAA1B,EAA6B;AAClCI,MAAAA,WAAW,GAAG,MAAd;AACD,KAFM,MAEA;AACLA,MAAAA,WAAW,GAAG,EAAd;AACD;;AACD,WAAOA,WAAP;AACD;;AAEDC,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AAEA,QAAMO,OAAO,GAAGR,KAAK,CAACS,IAAtB;AACA,QAAMC,UAAU,GAAGF,OAAO,CAACG,GAAR,CAAY,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAE/C,wBAAQ,QAAC,KAAD;AACN,MAAA,IAAI,EAAED,KADA;AAGN,MAAA,KAAK,EAAEC,KAHD;AAIN,MAAA,MAAM,EAAEV,cAAc,CAACU,KAAD;AAJhB,OAEDD,KAAK,CAACE,EAFL;AAAA;AAAA;AAAA;AAAA,YAAR;AAMD,GARkB,CAAnB;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACGJ;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAtCD;;GAAMX,S;;KAAAA,S;AAwCN,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport Slide from './Slide.js';\n\n//If slide index == focused, add .slide-focused to slide class list. \n//If slide index == focused-1 add .slide-prev to slide class list\n//if slide index == focused+1 add .slide-next to slide class list\n\nconst SlideShow = (props) => {\n  const [focused, setFocused] = useState(0) \n\n  // const idNames = ['prev', 'focused', 'next']\n\n  function determineFocus(slideIndex) {\n    let idSelection;\n    if (slideIndex == focused) {\n      idSelection = 'focused'\n    } else if (slideIndex == focused-1) {\n      idSelection = 'prev'\n    } else if (slideIndex == focused+1) {\n      idSelection = 'next'\n    } else {\n      idSelection = '';\n    }\n    return idSelection;\n  }\n\n  console.log(focused)\n\n  const content = props.data\n  const contentMap = content.map((slide, index) => {\n\n    return (<Slide\n      data={slide}\n      key={slide.id}\n      index={index}\n      idName={determineFocus(index)}\n    />)\n  })\n\n  return (\n    <div className=\"full-width-mod\">\n      <div className=\"slide-container\">\n        {contentMap}\n      </div>\n    </div>)\n}\n\nexport default SlideShow"]},"metadata":{},"sourceType":"module"}